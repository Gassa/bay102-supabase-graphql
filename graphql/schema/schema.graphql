scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean!]
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  in: [Date!]
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  in: [Datetime!]
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
  neq: JSON
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the collection"""
  deleteFromgame_recordsCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: game_recordsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): game_recordsDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromgamesCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: gamesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): gamesDeleteResponse!

  """
  Adds one or more `game_recordsInsertResponse` records to the collection
  """
  insertIntogame_recordsCollection(objects: [game_recordsInsertInput!]!): game_recordsInsertResponse

  """Adds one or more `gamesInsertResponse` records to the collection"""
  insertIntogamesCollection(objects: [gamesInsertInput!]!): gamesInsertResponse

  """Updates zero or more records in the collection"""
  updategame_recordsCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: game_recordsUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: game_recordsFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): game_recordsUpdateResponse!

  """Updates zero or more records in the collection"""
  updategamesCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: gamesUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: gamesFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): gamesUpdateResponse!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  """Ascending order, nulls first"""
  AscNullsFirst

  """Ascending order, nulls last"""
  AscNullsLast

  """Descending order, nulls first"""
  DescNullsFirst

  """Descending order, nulls last"""
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `game_records`"""
  game_recordsCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: game_recordsFilter

    """Sort order to apply to the collection"""
    orderBy: [game_recordsOrderBy!]
  ): game_recordsConnection

  """A pagable collection of type `games`"""
  gamesCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: gamesFilter

    """Sort order to apply to the collection"""
    orderBy: [gamesOrderBy!]
  ): gamesConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  in: [Time!]
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  in: [UUID!]
  neq: UUID
}

type game_records {
  id: BigInt!
  created_at: Datetime
  buy_in: BigInt
  player_name: String
  game_id: BigInt
}

type game_recordsConnection {
  edges: [game_recordsEdge!]!
  pageInfo: PageInfo!
}

type game_recordsDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [game_records!]!
}

type game_recordsEdge {
  cursor: String!
  node: game_records!
}

input game_recordsFilter {
  id: BigIntFilter
  created_at: DatetimeFilter
  buy_in: BigIntFilter
  player_name: StringFilter
  game_id: BigIntFilter
}

input game_recordsInsertInput {
  created_at: Datetime
  buy_in: BigInt
  player_name: String
  game_id: BigInt
}

type game_recordsInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [game_records!]!
}

input game_recordsOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  buy_in: OrderByDirection
  player_name: OrderByDirection
  game_id: OrderByDirection
}

input game_recordsUpdateInput {
  created_at: Datetime
  buy_in: BigInt
  player_name: String
  game_id: BigInt
}

type game_recordsUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [game_records!]!
}

type games {
  id: BigInt!
  created_at: Datetime
  name: String!
}

type gamesConnection {
  edges: [gamesEdge!]!
  pageInfo: PageInfo!
}

type gamesDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [games!]!
}

type gamesEdge {
  cursor: String!
  node: games!
}

input gamesFilter {
  id: BigIntFilter
  created_at: DatetimeFilter
  name: StringFilter
}

input gamesInsertInput {
  created_at: Datetime
  name: String
}

type gamesInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [games!]!
}

input gamesOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
  name: OrderByDirection
}

input gamesUpdateInput {
  created_at: Datetime
  name: String
}

type gamesUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [games!]!
}